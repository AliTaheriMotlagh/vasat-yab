// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  accounts  Account[]
  Requester Frind[]    @relation("Requester")
  Accepter  Frind[]    @relation("Accepter")
  Room      Room[]
  RoomInfo  RoomInfo[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Frind {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requesterId String
  accepterId  String
  isAccept    Boolean @default(false)

  requester User @relation(name: "Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  accepter  User @relation(name: "Accepter", fields: [accepterId], references: [id], onDelete: Cascade)

  @@unique([requesterId, accepterId])
  @@index([requesterId])
  @@index([accepterId])
}

model Room {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title          String
  creatorId      String
  vasatlongitude Float
  vasatlatitude  Float

  User     User       @relation(fields: [creatorId], references: [id])
  RoomInfo RoomInfo[]
}

model RoomInfo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roomId    String
  userId    String
  longitude Float
  latitude  Float
  isAccept  Boolean @default(false)

  User User @relation(fields: [userId], references: [id])
  Room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}
